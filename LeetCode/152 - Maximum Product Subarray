
// dynamic programming: Time O(n), Space O(n)
// max_product[i] = getMax(max_product[i-1] * nums[i], min_product[i-1] * nums[i], nums[i])
// min_product[i] = getMin(max_product[i-1] * nums[i], min_product[i-1] * nums[i], nums[i])

// since max_product only depends on one previous state
// then there is no need to record all previous states
// resulting method has time O(n), space O(1)


class Solution {
    public int maxProduct(int[] nums) {
        
		
		int maxProd = nums[0], minProd = nums[0];
		int globalMax = maxProd;
		
		for(int i = 1;i < nums.length;i ++) {
			
			int lastMaxProd = maxProd;
			int lastMinProd = minProd;
			if(nums[i] < 0) {
				maxProd = Math.max(lastMinProd * nums[i], nums[i]);
				minProd = Math.min(lastMaxProd * nums[i], nums[i]);
			} else {
				maxProd = Math.max(lastMaxProd * nums[i], nums[i]);
				minProd = Math.min(lastMinProd * nums[i], nums[i]);
			}
			
			globalMax = Math.max(globalMax, maxProd);
		}
		return globalMax;
    }
}
